openapi: 3.0.3
info:
  title: PhyloPic API
  description: Documentation for the next version of *PhyloPic*'s Application Programming Interface.
  contact:
    name: Mike Keesey
    email: keesey+phylopic@gmail.com
    url: http://tmkeesey.net
  license:
    name: CC0
    url: https://creativecommons.org/share-your-work/public-domain/cc0
  version: 2.0.0-alpha
tags:
  - name: general
    description: General API information and status.
  - name: nodes
    description: Methods related to phylogenetic nodes.
  - name: images
    description: Methods related to silhouette images.
  - name: search
    description: Searches for entities (images and nodes).
servers:
  - url: https://api.phylopic.org
    description: The production API
components:
  headers:
    Accept-Ranges:
      description: The units acceptable for range requests. Always `items`.
      example: items
      schema:
        pattern: "^items$"
        type: string
    Access-Control-Allow-Credentials:
      description: Specifies that credentials are allowed in requests. Always `true`.
      example: "true"
      schema:
        pattern: "^true$"
        type: string
    Access-Control-Allow-Origin:
      description: Specifies that requests may be made from any origin. Always `*`.
      example: "*"
      schema:
        pattern: '^\*$'
        type: string
    Cache-Control:
      description: Specifications for caching mechanisms.
      example: no-cache
      schema:
        type: string
    Content-Length:
      description: The length of the content, in bytes.
      example: 1024
      schema:
        format: number
        type: string
    Content-Range:
      description: The range of embedded items, in the format `"items {start}-{end}/{total}"`. If the total is unknown, it will be `"*"`. If there are no items, there will be `"*"` instead of `"{start}-{end}"`.
      example: items 0-9/88
      schema:
        pattern: '^items \d+-\d+/\d+$'
        type: string
    Content-Type:
      description: The media type for the payload, including API version. Always `application/vnd.phylopic.v2+json`.
      example: application/vnd.phylopic.v2+json
      schema:
        format: mimetype
        type: string
    ETag-GET:
      description: An identifier for this version of the resource. May be used on subsequent calls to avoid unnecessary reloading (`If-None-Match` header).
      example: '"identifier"'
      schema:
        pattern: '^"[^"]+"$'
        type: string
    ETag-GET-Range:
      description: An identifier for this version of the list. Should be used on subsequent calls to ensure the same version of the list is being loaded (`If-Match` header).
      example: '"identifier"'
      schema:
        pattern: '^"[^"]+"$'
        type: string
    ETag-PATCH:
      description: An identifier for this version of the resource. May be used on subsequent calls to avoid unnecessary reloading (`If-None-Match` header). Must be used on `PATCH` calls to ensure the same version of the resource is being updated.
      required: true
      example: '"identifier"'
      schema:
        pattern: '^"[^"]+"$'
        type: string
    ETag-PUT:
      description: An identifier for this version of the resource. May be used on subsequent calls to avoid unnecessary reloading (`If-None-Match` header). Must be used on `PUT` calls to ensure the same version of the resource is being updated.
      required: true
      example: '"identifier"'
      schema:
        pattern: '^"[^"]+"$'
        type: string
    Location:
      description: The URL for the resource.
      schema:
        format: url
        type: string
    Warning-GET-Range:
      description: Warning message. This will be included if you request a range starting after `0` and do not provide an `If-Match` header. Send back a header that matches the `ETag` header of the response to remove this warning.
      schema:
        type: string
  parameters:
    Accept:
      name: Accept
      in: header
      description: |
        The media type for the response, including API version. Must allow `application/vnd.phylopic.v2+json`.

        If omitted, `*/*` (a wildcard allowing all types) is assumed, and the response's `Content-Type` header will be `application/vnd.phylopic.v2+json`.
      schema:
        format: mimetype
        type: string
    Content-Type:
      name: Content-Type
      in: header
      required: true
      description: The media type for the payload, including API version. Must be `application/vnd.phylopic.v2+json`.
      schema:
        format: mimetype
        type: string
    If-Match-GET:
      name: If-Match
      in: header
      description: Identifies which version(s) of the list is/are expected, as given by the `ETag` header on a previous response. If that version is out of date, a `416` response will be returned.
      schema:
        pattern: '^(\*|(W\\/)?"([^"]|\\")+"(,\s*(W\/)?"([^"]|\\")+")*)$'
        type: string
      example: '"identifier"'
    If-Match-modify:
      name: If-Match
      in: header
      required: true
      description: Identifies which version(s) of the resource is/are being modified, as given by the `ETag` header on a previous response. If that version is out of date, a `412` response will be returned.
      schema:
        pattern: '^(\*|(W\\/)?"([^"]|\\")+"(,\s*(W\/)?"([^"]|\\")+")*)$'
        type: string
    If-None-Match:
      name: If-None-Match
      in: header
      description: Identifies which version of the resource has already been loaded, as given by the `ETag` header on a previous response. If this matches the current version, a `304` response will be returned.
      schema:
        pattern: '^(\*|(W\\/)?"([^"]|\\")+"(,\s*(W\/)?"([^"]|\\")+")*)$'
        type: string
    Range:
      name: Range
      in: header
      required: true
      description: |
        A range of the items to read, inclusive.

        Example: `items=0-9`
      schema:
        pattern: '^items=\d+-\d+$'
        type: string
    contributor:
      name: contributor
      in: query
      required: false
      description: |
        Limits results to entries contributed by a certain user.

        The value is the contributor's email address.
      schema:
        format: email
        type: string
    created_lt:
      name: created_lt
      in: query
      required: false
      description: |
        Limits results to entries created at or before this time.

        The value must be an ISO-formatted date-time, for example, `1970-01-01T00:00:00.000Z`.
      schema:
        format: date-time
        type: string
    created_gt:
      name: created_gt
      in: query
      required: false
      description: |
        Limits results to entries created at or after this time.

        The value must be an ISO-formatted date-time, for example, `1970-01-01T00:00:00.000Z`.
      schema:
        format: date-time
        type: string
    embed-Image:
      name: embed
      in: query
      description: |
        A space-separated list of related entities to embed. May include:
        - `generalNode`
        - `nodes`
        - `specificNode`

        If omitted, no entities will be embedded.
      schema:
        pattern: "^((generalNode|nodes|specificNode) )*(generalNode|nodes|specificNode)$"
        type: string
    embed-Node:
      name: embed
      in: query
      description: |
        A space-separated list of related entities to embed. May include:
        - `childNodes`
        - `parentNode`
        - `primaryImage`

        If omitted, no entities will be embedded.
      schema:
        pattern: "^((childNodes|parentNode|primaryImage) )*(childNodes|parentNode|primaryImage)$"
        type: string
    licensecomponents:
      name: licensecomponents
      in: query
      required: false
      description: |
        Limits entries to those with or without certain license components.

        Components are represented as a space-separated list. May include:
        - `by` (Attribution)
        - `nc` (NonCommercial)
        - `sa` (StandAlone)

        Any of these may be prepended by `-` to indicate that only images under licenses **without** that component should be returned.

        Examples:
        - `by`: only include images with licenses that require attribution.
        - `-by`: exclude all images with licenses that require attribution.
        - `-by -nc -sa`: only include images in the public domain (having none of the license components).
      schema:
        format: '^(\-?(by|nc|sa) )*(\-?(by|nc|sa))$'
        type: string
    modified_lt:
      name: modified_lt
      in: query
      required: false
      description: |
        Limits results to entries last modified at or before this time.

        The value must be an ISO-formatted date-time, for example, `1970-01-01T00:00:00.000Z`.
      schema:
        format: date-time
        type: string
      example: "1970-01-01T00:00:00.000Z"
    modified_gt:
      name: modified_gt
      in: query
      required: false
      description: |
        Limits results to entries last modified at or after this time.

        The value must be an ISO-formatted date-time, for example, `1970-01-01T00:00:00.000Z`.
      schema:
        format: date-time
        type: string
    sort:
      name: sort
      in: query
      required: false
      description: |
        A space-separated list of fields to sort by. May include:
        - `created`
        - `modified`

        Either of these may be prepended by `-` to indicate descending order. The default value is `-modified`.
      schema:
        pattern: '^(\-?(created|modified) )*(\-?(created|modified))$'
        type: string
    sort-Node:
      name: sort
      in: query
      required: false
      description: |
        A space-separated list of fields to sort by. May include:
        - `created`
        - `modified`
        - `tree`

        Either of these may be prepended by `-` to indicate descending order. The default value is `tree`.
      schema:
        pattern: '^(\-?(created|modified|tree) )*(\-?(created|modified|tree))$'
        type: string
    uuid-Entity:
      name: uuid
      in: path
      required: true
      description: The UUID of the entity.
      schema:
        format: uuid
        type: string
  responses:
    "204":
      description: The request completed successfully. No further information is provided.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
    "302":
      description: The requested resource has been found at another location.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Location:
          $ref: "#/components/headers/Location"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/EntityReference"
    "303":
      description: The requested resource should be loaded from another location.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Location:
          $ref: "#/components/headers/Location"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/EntityReference"
    "304":
      description: The resource has not been modified since the last time it was requested.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        ETag:
          $ref: "#/components/headers/ETag-GET"
    "307":
      description: The requested resource is available at another location, temporarily.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        Location:
          $ref: "#/components/headers/Location"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            type: object
            required:
              - _links
            properties:
              _links:
                type: object
                required:
                  - equivalent
                properties:
                  equivalent:
                    $ref: "#/components/schemas/Link"
    "400":
      description: There is an error in the request.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "404":
      description: The resource cannot be found.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "406":
      description: The request cannot be accepted because the `Accept` header does not allow an available type of content.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "410":
      description: The resource has been removed.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "412":
      description: The entity has been modified and needs to be refreshed before making further modifications.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "416":
      description: The requested range is not satisfiable.
      headers:
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        ETag:
          $ref: "#/components/headers/ETag-GET-Range"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            $ref: "#/components/schemas/Errors"
    "list-Image":
      description: |
        [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) list of embedded image records.
      headers:
        Accept-Ranges:
          $ref: "#/components/headers/Accept-Ranges"
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Range:
          $ref: "#/components/headers/Content-Range"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        ETag:
          $ref: "#/components/headers/ETag-GET-Range"
        Warning:
          $ref: "#/components/headers/Warning-GET-Range"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            type: object
            required:
              - _embedded
              - _links
            properties:
              _embedded:
                type: object
                description: Container for embedded entities.
                properties:
                  items:
                    type: array
                    description: The requested image entities.
                    items:
                      $ref: "#/components/schemas/ImageWithEmbedded"
              _links:
                type: object
                description: Container for a link to this resource (`self`).
                required:
                  - self
                properties:
                  self:
                    allOf:
                      - $ref: "#/components/schemas/Link"
                      - description: Link to this list.
              total:
                description: The total number of items in the set.
                format: uint
                type: number
    "list-Node":
      description: |
        [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) list of embedded node records.
      headers:
        Accept-Ranges:
          $ref: "#/components/headers/Accept-Ranges"
        Access-Control-Allow-Credentials:
          $ref: "#/components/headers/Access-Control-Allow-Credentials"
        Access-Control-Allow-Origin:
          $ref: "#/components/headers/Access-Control-Allow-Origin"
        Cache-Control:
          $ref: "#/components/headers/Cache-Control"
        Content-Length:
          $ref: "#/components/headers/Content-Length"
        Content-Range:
          $ref: "#/components/headers/Content-Range"
        Content-Type:
          $ref: "#/components/headers/Content-Type"
        ETag:
          $ref: "#/components/headers/ETag-GET-Range"
        Warning:
          $ref: "#/components/headers/Warning-GET-Range"
      content:
        application/vnd.phylopic.v2+json:
          schema:
            type: object
            required:
              - _embedded
              - _links
            properties:
              _embedded:
                type: object
                description: Container for embedded entities.
                properties:
                  items:
                    type: array
                    description: The requested node entities.
                    items:
                      $ref: "#/components/schemas/NodeWithEmbedded"
              _links:
                description: Container for a link to this resource (`self`).
                type: object
                required:
                  - self
                properties:
                  self:
                    allOf:
                      - $ref: "#/components/schemas/Link"
                      - description: Link to this list.
              total:
                description: The total number of items in the set.
                format: uint
                type: number
  schemas:
    Dated:
      description: Common properties for all dated objects.
      required:
        - created
        - modified
      type: object
      properties:
        created:
          description: The time this was created.
          format: date-time
          type: string
        modified:
          description: The last time this was modified.
          format: date-time
          type: string
    Entity:
      description: Common properties for all entities.
      required:
        - _links
        - created
        - modified
        - uuid
      allOf:
        - $ref: "#/components/schemas/Dated"
        - $ref: "#/components/schemas/EntityReference"
    EntityReference:
      description: Identifier and link for an entity.
      type: object
      required:
        - _links
        - uuid
      properties:
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: "#/components/schemas/Link"
        uuid:
          description: The universally unique identifier for this entity.
          format: uuid
          type: string
          example: 123e4567-e89b-12d3-a456-426655440000
    Errors:
      description: List of errors.
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            required:
              - developerMessage
              - type
              - userMessage
            properties:
              developerMessage:
                description: A message with details for developers.
                type: string
              documentation:
                description: A link to documentation for the error.
                format: url
                type: string
              field:
                description: The path to the field in the payload that caused the error.
                type: string
                example: "attribution"
              type:
                description: The type of error, from [this list](https://docs.aws.amazon.com/apigateway/api-reference/resource/gateway-response/#responseType).
                type: string
                example: BAD_REQUEST_PARAMETERS
              userMessage:
                description: A message to be presented to the user.
                type: string
        stack:
          description: Details about which functions were being processed when the error occurred.
          type: string
    Image:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - description: An image illustrating one or more nodes.
          required:
            - _links
            - attribution
            - sponsor
          type: object
          properties:
            attribution:
              type: string
              example: "Charles Knight"
              nullable: true
            sponsor:
              type: string
              example: "Patron Name"
              nullable: true
            _links:
              $ref: "#/components/schemas/ImageLinks"
    ImageLinks:
      type: object
      required:
        - contributor
        - generalNode
        - http://ogp.me/ns#image
        - license
        - nodes
        - rasterFiles
        - self
        - sourceFile
        - specificNode
        - thumbnailFiles
        - twitter:image
        - vectorFile
      properties:
        contributor:
          allOf:
            - $ref: "#/components/schemas/Link"
            - description: A `mailto:` URL with the contributor's email address.
        generalNode:
          allOf:
            - $ref: "#/components/schemas/Link"
            - description: A link to the node indicating how generally the image can be applied, either an ancestor of `specificNode` or a node indicating a common ancestor with `specificNode`.
              nullable: true
        "http://ogp.me/ns#image":
          allOf:
            - $ref: "#/components/schemas/MediaLink"
            - description: A link to an image for use with Open Graph (PNG format).
        license:
          allOf:
            - $ref: "#/components/schemas/Link"
            - description: A link to the license that this image is under.
        nodes:
          type: array
          description: Links to all nodes that this image illustrates, based on `specificNode` and (if provided) `generalNode`.
          items:
            $ref: "#/components/schemas/Link"
        rasterFiles:
          type: array
          description: A list of links to raster image files (PNG format) of various sizes.
          items:
            $ref: "#/components/schemas/MediaLink"
        sourceFile:
          allOf:
            - $ref: "#/components/schemas/MediaLink"
            - description: A link to the raster or vector image file as it was submitted. May be an SVG file or any of the accepted raster image formats.
        specificNode:
          allOf:
            - $ref: "#/components/schemas/Link"
            - description: A link to the node indicating the specific taxon that this image illustrates.
        submission:
          allOf:
            - $ref: "#/components/schemas/Link"
            - description: A link for viewing the latest submitted changes.
        thumbnailFiles:
          type: array
          description: A list of links to raster thumbnail image files (PNG format) of various square sizes.
          items:
            $ref: "#/components/schemas/MediaLink"
        "twitter:image":
          allOf:
            - $ref: "#/components/schemas/MediaLink"
            - description: A link to an image for use with Twitter (PNG format).
        vectorFile:
          allOf:
            - $ref: "#/components/schemas/MediaLink"
            - description: A link to the vector image file as it was submitted. Always in SVG format.
              nullable: true
    ImageWithEmbedded:
      description: Resource for an image.
      required:
        - _embedded
      allOf:
        - type: object
          properties:
            _embedded:
              type: object
              description: Embedded entities related to the image. See `_links` for more information.
              properties:
                generalNode:
                  allOf:
                    - $ref: "#/components/schemas/Node"
                    - nullable: true
                nodes:
                  type: array
                  items:
                    $ref: "#/components/schemas/Node"
                specificNode:
                  $ref: "#/components/schemas/Node"
        - $ref: "#/components/schemas/Image"
    Link:
      description: A basic link.
      type: object
      required:
        - href
      properties:
        href:
          format: url
          type: string
          example: /path
    MediaLink:
      allOf:
        - $ref: "#/components/schemas/Link"
        - type: object
          description: A link to an image file.
          required:
            - href
            - sizes
            - type
          properties:
            href:
              example: "/path/123e4567-e89b-12d3-a456-426655440000/raster32.png"
            sizes:
              pattern: '^\d+x\d+$'
              type: string
              example: 32x32
            type:
              format: mimetype
              type: string
              example: "image/png"
    Node:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - description: A phylogenetic node, corresponding to a taxonomic unit.
          type: object
          required:
            - _links
            - names
            - root
          properties:
            _links:
              type: object
              required:
                - childNodes
                - cladeImages
                - contributor
                - external
                - images
                - parentNode
                - primaryImage
                - self
              properties:
                childNodes:
                  type: array
                  description: |
                    Links to all immediate descendant nodes, in alphabetical order.
                    Note that this only includes illustrated nodes.
                  items:
                    allOf:
                      - $ref: "#/components/schemas/Link"
                cladeImages:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: A link to a list of all images illustrating this node or any descendant node.
                contributor:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: A `mailto:` URL with the contributor's email address.
                external:
                  type: array
                  description: Links to the same node under other domains (for example, Encyclopedia of Life).
                  items:
                    $ref: "#/components/schemas/TitledLink"
                images:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: A link to a list of all images illustrating this node.
                parentNode:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: Link to the parent node (immediate ancestor).
                      nullable: true
                primaryImage:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: Link to the primary image for this node.
                      nullable: true
            names:
              type: array
              description: A list of all of this node's names, starting with the preferred name.
              items:
                $ref: "#/components/schemas/NodeName"
            root:
              description: A flag that, if `true`, indicates that this is a root node and should not have a parent.
              type: boolean
    NodeName:
      description: A taxonomic name, associated with a phylogenetic node.
      type: array
      items:
        type: object
        required:
          - class
          - text
        properties:
          class:
            format: "^(citation|comment|operator|rank|scientific|vernacular)$"
            type: string
            example: scientific
          text:
            format: '^\S+( \S+)*$'
            type: string
            example: Homo sapiens
    NodeReference:
      description: A reference to a phylogenetic node.
      required:
        - _embedded
        - _links
        - names
      properties:
        _embedded:
          type: object
          properties:
            primaryImage:
              $ref: "#/components/schemas/Image"
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: "#/components/schemas/Link"
        names:
          type: array
          items:
            $ref: "#/components/schemas/NodeName"
    NodeWithEmbedded:
      description: A resource for a phylogenetic node.
      required:
        - _embedded
        - _links
        - names
        - root
      allOf:
        - type: object
          properties:
            _embedded:
              type: object
              description: Embedded entities related to the phylogenetic node. See `_links` for more information.
              properties:
                childNodes:
                  type: array
                  items:
                    $ref: "#/components/schemas/Node"
                contributor:
                  allOf:
                    - $ref: "#/components/schemas/Link"
                    - description: A `mailto:` URL with the contributor's email address.
                parentNode:
                  allOf:
                    - $ref: "#/components/schemas/Node"
                    - nullable: true
                primaryImage:
                  allOf:
                    - $ref: "#/components/schemas/Image"
                    - nullable: true
        - $ref: "#/components/schemas/Node"
    TitledLink:
      description: A link with a title, usually for an external resource.
      allOf:
        - $ref: "#/components/schemas/Link"
        - type: object
          required:
            - title
          properties:
            title:
              type: string
              example: "Name"
  securitySchemes:
    keyAuth:
      description: User consuming the API data.
      type: apiKey
      in: header
      name: X-API-Key
paths:
  /:
    get:
      operationId: get
      summary: Returns API information and links to resources.
      tags:
        - general
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-None-Match"
      security:
        - keyAuth: []
      responses:
        "200":
          description: |
            [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) resource description for the API.
          headers:
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag-GET"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                type: object
                required:
                  - _links
                  - title
                  - version
                properties:
                  _links:
                    type: object
                    required:
                      - contact
                      - documentation
                      - resources
                      - self
                    properties:
                      contact:
                        $ref: "#/components/schemas/TitledLink"
                      documentation:
                        $ref: "#/components/schemas/Link"
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/TitledLink"
                      self:
                        $ref: "#/components/schemas/Link"
                  buildTimestamp:
                    description: Timestamp of the current data build.
                    pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$'
                    type: string
                    example: 1970-01-01T00:00:00.000Z
                  title:
                    type: string
                    example: PhyloPic Application Programming Interface
                  version:
                    description: Latest semantic version of the API.
                    pattern: '^\d+\.\d+\.\d+(-(alpha|beta|rc)(\.\d+)?)?$'
                    type: string
                    example: 2.0.0
        "304":
          $ref: "#/components/responses/304"
        "406":
          $ref: "#/components/responses/406"
  /autocomplete:
    get:
      operationId: getAutocomplete
      summary: Gets suggestions for full names based on partial text.
      tags:
        - nodes
        - search
      description: |
        Never returns more than 30 results. Results with the text toward the beginning are favored. The results can be clarified via `/search/nodes`.
      parameters:
        - $ref: "#/components/parameters/Accept"
        - name: query
          in: query
          required: true
          description: The leading text to look up. Must be at least two characters.
          schema:
            type: string
          example: human
      security:
        - keyAuth: []
      responses:
        "200":
          description: |
            [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) textual matches.
          headers:
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                type: object
                required:
                  - _links
                  - matches
                properties:
                  _links:
                    type: object
                    required:
                      - self
                    properties:
                      self:
                        $ref: "#/components/schemas/Link"
                  matches:
                    type: array
                    items:
                      type: string
                      example: modern humans
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
  /cladeimages/{uuid}:
    get:
      operationId: getCladeImages
      summary: Lists all images associated with a given phylogenetic node or any of its descendants.
      tags:
        - images
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/contributor"
        - $ref: "#/components/parameters/created_lt"
        - $ref: "#/components/parameters/created_gt"
        - $ref: "#/components/parameters/embed-Image"
        - $ref: "#/components/parameters/licensecomponents"
        - $ref: "#/components/parameters/modified_lt"
        - $ref: "#/components/parameters/modified_gt"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/uuid-Entity"
      security:
        - keyAuth: []
      responses:
        "206":
          $ref: "#/components/responses/list-Image"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "410":
          $ref: "#/components/responses/410"
        "416":
          $ref: "#/components/responses/416"
  /images:
    get:
      operationId: getImages
      summary: Lists all images.
      tags:
        - images
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/contributor"
        - $ref: "#/components/parameters/created_lt"
        - $ref: "#/components/parameters/created_gt"
        - $ref: "#/components/parameters/embed-Image"
        - $ref: "#/components/parameters/licensecomponents"
        - $ref: "#/components/parameters/modified_lt"
        - $ref: "#/components/parameters/modified_gt"
        - $ref: "#/components/parameters/sort"
      security:
        - keyAuth: []
      responses:
        "206":
          $ref: "#/components/responses/list-Image"
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
        "416":
          $ref: "#/components/responses/416"
  /images/{uuid}:
    get:
      operationId: getImage
      summary: Returns data for a specific image.
      tags:
        - images
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-None-Match"
        - $ref: "#/components/parameters/uuid-Entity"
        - $ref: "#/components/parameters/embed-Image"
      security:
        - keyAuth: []
      responses:
        "200":
          description: |
            [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) image record.
          headers:
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag-GET"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                $ref: "#/components/schemas/ImageWithEmbedded"
        "304":
          $ref: "#/components/responses/304"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "410":
          $ref: "#/components/responses/410"
  /licenses:
    get:
      operationId: getLicenses
      summary: Returns a list of licenses.
      tags:
        - images
      description:
        Returns a list of all licenses that may be used for new submissions.

        Note that this does not include all licenses for all images in the database.
      parameters:
        - $ref: "#/components/parameters/Accept"
      security:
        - keyAuth: []
      responses:
        "200":
          description: List of titled links to licenses.
          headers:
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag-GET"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TitledLink"
        "406":
          $ref: "#/components/responses/406"
  /lineage/{uuid}:
    get:
      operationId: getLineage
      summary: Retrieves the ancestral lineage for a given node.
      description: The nodes are listed in order from least to most ancestral. That is, the first node is the specified node, the second is its parent node, and the last is the root node.
      tags:
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/embed-Node"
        - $ref: "#/components/parameters/uuid-Entity"
      security:
        - keyAuth: []
      responses:
        "206":
          $ref: "#/components/responses/list-Node"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "410":
          $ref: "#/components/responses/410"
        "416":
          $ref: "#/components/responses/416"
  /nodeimages/{uuid}:
    get:
      operationId: getNodeImages
      summary: Lists all images associated with a given phylogenetic node.
      tags:
        - images
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/contributor"
        - $ref: "#/components/parameters/created_lt"
        - $ref: "#/components/parameters/created_gt"
        - $ref: "#/components/parameters/embed-Image"
        - $ref: "#/components/parameters/licensecomponents"
        - $ref: "#/components/parameters/modified_lt"
        - $ref: "#/components/parameters/modified_gt"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/uuid-Entity"
      security:
        - keyAuth: []
      responses:
        "206":
          $ref: "#/components/responses/list-Image"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "410":
          $ref: "#/components/responses/410"
        "416":
          $ref: "#/components/responses/416"
  /nodes:
    get:
      operationId: getNodes
      summary: Lists all nodes.
      tags:
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/contributor"
        - $ref: "#/components/parameters/created_lt"
        - $ref: "#/components/parameters/created_gt"
        - $ref: "#/components/parameters/embed-Node"
        - $ref: "#/components/parameters/modified_lt"
        - $ref: "#/components/parameters/modified_gt"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/uuid-Entity"
      security:
        - keyAuth: []
      responses:
        "206":
          $ref: "#/components/responses/list-Node"
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
        "416":
          $ref: "#/components/responses/416"
  /nodes/{uuid}:
    get:
      operationId: getNode
      summary: Returns a specific phylogenetic node.
      tags:
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-None-Match"
        - $ref: "#/components/parameters/uuid-Entity"
        - $ref: "#/components/parameters/embed-Node"
      security:
        - keyAuth: []
      responses:
        "200":
          description: |
            [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) node record.
          headers:
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag-GET"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                $ref: "#/components/schemas/NodeWithEmbedded"
        "304":
          $ref: "#/components/responses/304"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
        "410":
          $ref: "#/components/responses/410"
  /ping:
    get:
      operationId: ping
      summary: Checks if the API is operational.
      tags:
        - general
      responses:
        "204":
          $ref: "#/components/responses/204"
  /resolve:
    get:
      operationId: resolve
      summary: Resolves an external URI to the closest phylogenetic node.
      tags:
        - nodes
        - search
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/embed-Node"
        - name: uri
          in: query
          required: true
          description: The URI of the external resource.
          schema:
            format: uri
            type: string
          example: https://eol.org/pages/328046
      security:
        - keyAuth: []
      responses:
        "307":
          description: A corresponding or ancestral node was found.
          headers:
            Location:
              $ref: "#/components/headers/Location"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "406":
          $ref: "#/components/responses/406"
  /rootnode:
    get:
      operationId: getRootNode
      summary: Retrieves the root phylogenetic node (the ancestor of all others).
      description: Redirects to the appropriate `/nodes/{uuid}` endpoint.
      tags:
        - nodes
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/embed-Node"
      security:
        - keyAuth: []
      responses:
        "303":
          $ref: "#/components/responses/303"
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
  /search/nodes:
    get:
      operationId: searchNodes
      summary: Returns an embedded list of references to nodes whose names match a search string.
      tags:
        - nodes
        - search
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/If-Match-GET"
        - $ref: "#/components/parameters/Range"
        - $ref: "#/components/parameters/contributor"
        - $ref: "#/components/parameters/created_lt"
        - $ref: "#/components/parameters/created_gt"
        - $ref: "#/components/parameters/embed-Node"
        - $ref: "#/components/parameters/modified_lt"
        - $ref: "#/components/parameters/modified_gt"
        - name: query
          in: query
          required: true
          description: The text to search for. Must be at least two characters, trimmed of whitespace.
          schema:
            type: string
            example: Homo sapiens
        - $ref: "#/components/parameters/sort"
      security:
        - keyAuth: []
      responses:
        "206":
          description: |
            [HAL](http://stateless.co/hal_specification.html) [JSON](https://www.json.org/) description of search results.
          headers:
            Accept-Ranges:
              $ref: "#/components/headers/Accept-Ranges"
            Access-Control-Allow-Credentials:
              $ref: "#/components/headers/Access-Control-Allow-Credentials"
            Access-Control-Allow-Origin:
              $ref: "#/components/headers/Access-Control-Allow-Origin"
            Cache-Control:
              $ref: "#/components/headers/Cache-Control"
            Content-Length:
              $ref: "#/components/headers/Content-Length"
            Content-Range:
              $ref: "#/components/headers/Content-Range"
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            ETag:
              $ref: "#/components/headers/ETag-GET-Range"
            Warning:
              $ref: "#/components/headers/Warning-GET-Range"
          content:
            application/vnd.phylopic.v2+json:
              schema:
                type: object
                required:
                  - _embedded
                  - _links
                  - query
                properties:
                  _embedded:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/NodeReference"
                  _links:
                    type: object
                    required:
                      - self
                    properties:
                      self:
                        $ref: "#/components/schemas/Link"
                  query:
                    type: string
                    example: Homo sapiens
        "400":
          $ref: "#/components/responses/400"
        "406":
          $ref: "#/components/responses/406"
        "416":
          $ref: "#/components/responses/416"
